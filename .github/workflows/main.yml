name: RDP4 with Persistent Storage and Proper Cancellation

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

env:
  RDP_USERNAME: "RDP4"
  RDP_PASSWORD: "03315815664@Uop"
  RDP_HOSTNAME: "RDP4"
  TAILSCALE_API_KEY: "tskey-api-kgQdsQ7qwu11CNTRL-RDrHnhtrjC1vNtMg3p39C1RD4x2nHo248"
  TAILSCALE_AUTH_KEY: "tskey-auth-kaPKZZUvxX11CNTRL-LVJyjXQNxJdm1WEA51tLJdYUt2HgzoQbd"
  TAILSCALE_TAILNET: "amberhardiniii.github"

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure Git for automation
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions[bot]"
          git config --global pull.rebase false
     
      - name: Create cancellation handler script
        run: |
          @"
          # Cancellation handler script
          `$cancelFile = "C:\cancel_workflow.txt"
          if (Test-Path `$cancelFile) {
              Remove-Item `$cancelFile -Force
          }
          "@ | Out-File -FilePath "C:\cancel_handler.ps1" -Encoding UTF8
          
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          
      - name: Configure RDP Session Timeout Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "MaxDisconnectionTime" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "MaxIdleTime" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "MaxConnectionTime" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "KeepAliveEnable" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "KeepAliveInterval" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fResetBroken" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fReconnectSame" -Value 0 -Force
          Write-Host "RDP session timeout settings configured for persistent connections"
            
      - name: Create RDP user profile
        run: |
          $fixedPassword = "${{ env.RDP_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          
          if (-not (Get-LocalUser -Name "${{ env.RDP_USERNAME }}" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "${{ env.RDP_USERNAME }}"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "${{ env.RDP_USERNAME }}"
          }
          
          $securePassword = ConvertTo-SecureString "${{ env.RDP_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential("${{ env.RDP_USERNAME }}", $securePassword)
          
          Invoke-Command -ComputerName localhost -Credential $credential -ScriptBlock {
              Write-Host "RDP user profile created successfully"
              $profilePath = $env:USERPROFILE
              Write-Host "Profile path: $profilePath"
          } -ErrorAction SilentlyContinue
          
          Write-Host "RDP user profile setup attempted"      
      
      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
      
      - name: ðŸ§¹ PURGE any devices containing '${{ env.RDP_HOSTNAME }}' (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ env.TAILSCALE_API_KEY }}" }
          
          Write-Host "Searching for ${{ env.RDP_HOSTNAME }} devices to purge..."
          
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/${{ env.TAILSCALE_TAILNET }}/devices" -ErrorAction Stop
            
            $RDPDevices = $resp.devices | Where-Object { 
              $_.name -match "(?i)${{ env.RDP_HOSTNAME }}" -or 
              $_.hostname -match "(?i)${{ env.RDP_HOSTNAME }}" -or 
              $_.dnsname -match "(?i)${{ env.RDP_HOSTNAME }}"
            }
            
            Write-Host "Found $($RDPDevices.Count) ${{ env.RDP_HOSTNAME }} devices to purge"
            
            foreach ($device in $RDPDevices) {
              try {
                Write-Host "Deleting: $($device.name) (ID: $($device.id))"
                Invoke-RestMethod -Method DELETE -Headers $hdr -Uri "https://api.tailscale.com/api/v2/device/$($device.id)" -ErrorAction Stop
                Write-Host "âœ“ Successfully deleted: $($device.name)"
              } catch {
                Write-Warning "Failed to delete $($device.name): $($_.Exception.Message)"
              }
            }
          } catch {
            Write-Warning "Device purge failed: $($_.Exception.Message)"
          }      
      
      - name: Establish Tailscale Connection with ${{ env.RDP_HOSTNAME }} hostname
        run: |
          $desiredHostname = "${{ env.RDP_HOSTNAME }}"
          Write-Host "Forcing hostname: $desiredHostname"
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          Start-Sleep -Seconds 2
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ env.TAILSCALE_AUTH_KEY }} --hostname=$desiredHostname --accept-routes=true --accept-dns=true --reset
          
          $tsIP = $null
          $tsHostname = $null
          $retries = 0
          $maxRetries = 25
          
          while ($retries -lt $maxRetries) {
              $status = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json -ErrorAction SilentlyContinue
              if ($status -and $status.BackendState -eq "Running") {
                  $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                  $tsHostname = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json | Select-Object -ExpandProperty Self | Select-Object -ExpandProperty DNSName -ErrorAction SilentlyContinue
                  if ($tsIP -and $tsHostname) { 
                      Write-Host "Successfully connected to Tailscale!"
                      if ($tsHostname -like "*${{ env.RDP_HOSTNAME }}*") {
                          Write-Host "âœ“ Hostname verified: $tsHostname"
                          break
                      } else {
                          Write-Host "Hostname mismatch. Got: $tsHostname, Expected: ${{ env.RDP_HOSTNAME }}"
                          $tsIP = $null
                      }
                  }
              }
              Write-Host "Waiting for Tailscale connection... (Attempt $($retries + 1)/$maxRetries)"
              Start-Sleep -Seconds 3
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale failed to connect with hostname ${{ env.RDP_HOSTNAME }} after $maxRetries attempts"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=$tsHostname" >> $env:GITHUB_ENV
          echo "RDP_CONNECTION_STRING=$desiredHostname" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected successfully!"
          Write-Host "IP: $tsIP"
          Write-Host "Hostname: $tsHostname"
          Write-Host "Connection Name: $desiredHostname"      
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connection to: $env:TAILSCALE_IP"
          
          $maxRetries = 15
          $retryCount = 0
          $connected = $false
          
          while ($retryCount -lt $maxRetries -and -not $connected) {
              try {
                  $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet -ErrorAction Stop
                  if ($testResult) {
                      $connected = $true
                      Write-Host "RDP connection successful!"
                      break
                  }
              } catch {
                  Write-Host "RDP test attempt $($retryCount + 1)/$maxRetries failed, retrying..."
              }
              $retryCount++
              Start-Sleep -Seconds 2
          }
          
          if (-not $connected) {
              Write-Error "RDP connection failed after $maxRetries attempts"
              exit 1
          }      
      
      - name: Display Connection Information
        run: |
          Write-Host "`n=== RDP ACCESS INFORMATION ==="
          Write-Host "Connection Address: $env:RDP_CONNECTION_STRING"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: ${{ env.RDP_USERNAME }}"
          Write-Host "Password: ${{ env.RDP_PASSWORD }}"
          Write-Host "=================================`n"
          
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## RDP Connection Details"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Address:** $env:RDP_CONNECTION_STRING"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**IP Address:** $env:TAILSCALE_IP"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Username:** ${{ env.RDP_USERNAME }}"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Password:** ${{ env.RDP_PASSWORD }}"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Session Started:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
      - name: Copy Python script to RDP user folder
        run: |
          # Create the directory if it doesn't exist
          $destinationDir = "C:\Users\${{ env.RDP_USERNAME }}\Downloads"
          if (-not (Test-Path $destinationDir)) {
              New-Item -ItemType Directory -Path $destinationDir -Force
          }
          Copy-Item -Path ".\automation_script.py" -Destination "$destinationDir\automation_script.py" -Force
      
      - name: Verify script creation in RDP user folder
        run: |
          $scriptPath = "C:\Users\${{ env.RDP_USERNAME }}\Downloads\automation_script.py"
          
          if (Test-Path $scriptPath) {
              Write-Host "âœ“ Script created successfully at: $scriptPath"
              Write-Host "File size: $( (Get-Item $scriptPath).Length ) bytes"
          } else {
              Write-Host "âœ— Script was not created in RDP user Downloads folder"
              # Try to find where it might be
              Get-ChildItem "C:\Users\" -Recurse -Filter "automation_script.py" -ErrorAction SilentlyContinue | ForEach-Object {
                  Write-Host "Found script at: $($_.FullName)"
              }
          }
     
      - name: Keep RDP session active with cancellation support
        id: rdp-session
        run: |
          # Create a cancellation flag file
          $cancelFile = "C:\cancel_workflow.txt"
          if (Test-Path $cancelFile) {
              Remove-Item $cancelFile -Force
          }
          
          $endTime = (Get-Date).AddMinutes(350)
          $checkInterval = 30
          
          Write-Host "RDP session started with cancellation support"
          Write-Host "Session will run until: $endTime"
          Write-Host "Check for cancellation every $checkInterval seconds"
          
          while ((Get-Date) -lt $endTime) {
              if (Test-Path $cancelFile) {
                  Write-Host "Cancellation detected. Cleaning up..."
                  break
              }
              
              $timeLeft = $endTime - (Get-Date)
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Time left: $([int]$timeLeft.TotalMinutes) minutes"
              Start-Sleep -Seconds $checkInterval
          }
          
          Write-Host "RDP session completed or cancelled"
      
      - name: Cleanup on cancellation or completion
        if: always()
        run: |
          Write-Host "Starting cleanup process..."
          
          # Create cancellation flag to stop the main loop
          $cancelFile = "C:\cancel_workflow.txt"
          "cancelled" | Out-File -FilePath $cancelFile -Encoding ASCII
          
          # Stop Tailscale gracefully
          Write-Host "Stopping Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down 2>$null
          Start-Sleep -Seconds 3
          
          # Kill any remaining processes
          Write-Host "Stopping related processes..."
          Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "cmd" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "tailscale" -Force -ErrorAction SilentlyContinue
          
          # Disable RDP
          Write-Host "Disabling RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 1 -Force
          Restart-Service -Name TermService -Force
          
          Write-Host "Cleanup completed"
            
      - name: ðŸ§¹ PURGE any devices containing '${{ env.RDP_HOSTNAME }}' (shutdown)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ env.TAILSCALE_API_KEY }}" }
          
          Write-Host "Searching for ${{ env.RDP_HOSTNAME }} devices to purge..."
          
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/${{ env.TAILSCALE_TAILNET }}/devices" -ErrorAction Stop
            
            $RDPDevices = $resp.devices | Where-Object { 
              $_.name -match "(?i)${{ env.RDP_HOSTNAME }}" -or 
              $_.hostname -match "(?i)${{ env.RDP_HOSTNAME }}" -or 
              $_.dnsname -match "(?i)${{ env.RDP_HOSTNAME }}"
            }
            
            Write-Host "Found $($RDPDevices.Count) ${{ env.RDP_HOSTNAME }} devices to purge"
            
            foreach ($device in $RDPDevices) {
              try {
                Write-Host "Deleting: $($device.name) (ID: $($device.id))"
                Invoke-RestMethod -Method DELETE -Headers $hdr -Uri "https://api.tailscale.com/api/v2/device/$($device.id)" -ErrorAction Stop
                Write-Host "âœ“ Successfully deleted: $($device.name)"
              } catch {
                Write-Warning "Failed to delete $($device.name): $($_.Exception.Message)"
              }
            }
          } catch {
            Write-Warning "Device purge failed: $($_.Exception.Message)"
          }
